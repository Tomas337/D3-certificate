import * as d3 from "https://cdn.skypack.dev/d3@7.8.4";
import * as d3Geo from "https://cdn.skypack.dev/d3-geo@3.1.0";
import * as topojsonClient from "https://cdn.skypack.dev/topojson-client@3.1.0";
import * as topojsonSimplify from "https://cdn.skypack.dev/topojson-simplify@3.0.3";
import * as topojsonServer from "https://cdn.skypack.dev/topojson-server@3.0.1";


Promise.all([
  fetch('https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/counties.json').then(resp => resp.json()),
  fetch('https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/for_user_education.json').then(resp => resp.json())
]).then(responses => {
  
  const countiesGeoJSON = topojsonClient.feature(responses[0], responses[0].objects.counties);
  const nationGeoJSON = topojsonClient.feature(responses[0], responses[0].objects.nation);
  const statesGeoJSON = topojsonClient.feature(responses[0], responses[0].objects.states);
  const eduArray = responses[1];
  
  d3.select('body')
    .append('div')
    .attr('id', 'container')
  
  d3.select('#container')
    .append('h1')
    .text('United States Educational Attainment')
    .attr('id', 'title')
    .append('h2')
    .text("Percentage of adults age 25 and older with a bachelor's degree or higher (2010-2014)")
    .attr('id', 'description')
  
  const w = 900;
  const h = 500;
  
  let map = d3.select('#container')
    .append('svg')
    .attr('width', w)
    .attr('height', h)
    .append('g')
    .attr('class', 'map')
  
  const tooltip = d3.select("body")
      .append("div")
      .attr("class", "tooltip")
      .attr("id", "tooltip")
      .style("opacity", 0)
  
  let geoGenerator = d3.geoPath(
    d3.geoIdentity().fitSize([w,h],nationGeoJSON)
  )
  
  const features = [nationGeoJSON.features, statesGeoJSON.features];
  const className = ['nation', 'state'];
  
  for(let i = 0; i < 2; i++){
    map.selectAll('.' + className[i])
    .data(features[i])
    .enter()
    .append('path')
    .attr('class', className[i])
    .attr('d', geoGenerator)
  }

  const colors = ['#C1F0C1', '#A2E1A2', '#71C971', '#40B340', '#1F9E1F', '#0D8B0D', '#006400'];
  
  map.selectAll('.county')
    .data(countiesGeoJSON.features)
    .enter()
    .append('path')
    .attr('class', 'county')
    .attr('d', geoGenerator)
    .attr('data-fips', d => {
      const eduObj = eduArray.filter((cur) => cur.fips == d.id)[0];
      return eduObj.fips;
    })
    .attr('data-education', d => {
      const eduObj = eduArray.filter((cur) => cur.fips == d.id)[0];
      return eduObj.bachelorsOrHigher;
    })
    .style('fill', d => {
    const edu = eduArray.filter((cur) => cur.fips == d.id)[0].bachelorsOrHigher;
    return edu < 14 ? colors[0] : edu < 28 ? colors[1] : edu < 42 ? colors[2] : edu < 56 ? colors[3] : edu < 70 ? colors[4] : edu < 84 ? colors[5] : colors[6];
    })
    .on("mouseover", function(event, d) {
      this.parentNode.appendChild(this);
      const x = event.clientX;
      const y = event.clientY;
      const edu = eduArray.filter((cur) => cur.fips == d.id)[0];
      tooltip.style("opacity", 0.9)        
      tooltip.attr("id", "tooltip")
      tooltip.attr("data-education", edu.bachelorsOrHigher)
      tooltip.html(edu.area_name + ", " + edu.state + ": " + edu.bachelorsOrHigher + '%')
        .style("left", (x+15) + "px")
        .style("top", (y-40) + "px");
    })
    .on("mouseout", function() {
      tooltip.style("opacity", 0);
    })
  
  const legendH = 40;
  const legendW = 280;
  const legendPadding = 20;

  const legendScale = d3.scaleLinear()
    .domain([0, 1])
    .range([0, legendW-2*legendPadding]) //times two to compensate for transform
  const legendAxis = d3.axisBottom(legendScale).tickFormat(d3.format(".0%"));

  const legend = d3.select('#container')
    .append('svg')
    .attr('width', legendW)
    .attr('height', legendH)
    .attr('id', 'legend')

  legend.append('g')
    .attr("transform", "translate(" + legendPadding + "," + legendH/2 +")")
    .attr('id', 'legend-axis')
    .call(legendAxis)

  const rectH = 10;
  const share = [0, 0.14, 0.28, 0.42, 0.56, 0.70, 0.84, 1];

  for(let i = 0; i < 7; i++){
    legend.append('rect')
      .attr('x', legendScale(share[i]) + legendPadding)
      .attr('y', legendH/2-rectH)
      .attr("width", legendScale(share[i+1])-legendScale(share[i]))
      .attr("height", rectH)
      .style('fill', colors[i])
  }
  console.log(eduArray)
})